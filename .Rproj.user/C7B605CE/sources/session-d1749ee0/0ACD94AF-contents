45+978+121
67/6
sqrt(894)

library(tidyverse)

library(ggplot2)
library(ggthemes)

nrow(mpg)
ncol(mpg)
?mpg

ggplot(data = mpg) + 
  geom_point() 

ggplot(data = mpg, mapping =  aes(displ, hwy)) + 
  geom_point()

ggplot(data = mpg, mapping =  aes(hwy, cyl)) + 
  geom_point()

data=mpg
ggplot(data = mpg, mapping =  aes(class, drv)) + 
  geom_point()


table(data$class, data$drv)
ggplot(as.data.frame(table(data$class, data$drv)),
       aes(Var1, Freq, fill=Var2)) + 
  geom_bar(stat="identity", position = 'dodge') 

ggplot(as.data.frame(table(data$class, data$drv)), 
       aes(Var1, Freq, fill=Var2)) + 
  geom_bar(stat="identity", position = 'stack')


ggplot(data = mpg, mapping =  aes(displ, hwy, color = class)) + 
  geom_point()

glimpse(mpg)


ggplot(data = mpg, mapping =  aes(displ, hwy, color = -cyl)) + 
  geom_point()

ggplot(data = mpg, mapping =  aes(displ, hwy, size = cyl)) + 
  geom_point()

ggplot(data = mpg, mapping =  aes(displ, hwy, shape = class)) + 
  geom_point()

library(ggplot2)

# Crear un tema personalizado
library(ggplot2)
library(showtext)

library(ggplot2)
library(rsvg)
library(grid)

# Cargar la fuente
font_add(family = "CustomFont", regular = "C:/Users/User/Documents/GitHub/selenium-workshop/Amiri-Regular/Amiri-Regular.ttf")
showtext_auto()

#logo <- rsvg::rsvg("C:/Users/User/Documents/GitHub/selenium-workshop/logo.svg")
#logo_grob <- rasterGrob(logo, interpolate = TRUE)

logo <- png::readPNG("C:/Users/User/Documents/GitHub/selenium-workshop/logo.png")
logo_grob <- rasterGrob(logo, interpolate = TRUE)
print(logo_grob)

# Crear el tema personalizado
theme_custom <- function() {
  theme_minimal(base_family = "Arial") +  # Set a default font family for the rest
    theme(
      # Title with custom font
      plot.title = element_text(family = "CustomFont", face = "bold", color = "#CC0000", size = 20),
      
      # Subtítulo en negro, más pequeño que el título
      plot.subtitle = element_text(face = "plain", color = "#000000", size = 16),
      
      # Caption en gris, más pequeño que el subtítulo
      plot.caption = element_text(face = "plain", color = "#808080", size = 12),
      
      # Nombres de los ejes como el caption
      axis.title = element_text(face = "plain", color = "#808080", size = 12),
      
      # Ticks en negro y líneas dashed en gris para la escala
      axis.ticks = element_line(color = "#000000"),
      axis.ticks.length = unit(0.2, "cm"),
      panel.grid.major = element_line(color = "#D3D3D3", linetype = "dashed"),
      panel.grid.minor = element_line(color = "#D3D3D3", linetype = "dashed"),
      plot.margin = margin(t = 5, r = 5, b = 5, l = 5) # Ajustar los márgenes para el logo
      
    )
}

# Ejemplo de gráfico con el tema personalizado
p <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  labs(
    title = "Title in Custom Font",
    subtitle = "Subtitle in Default Font",
    caption = "Caption in Default Font"
  ) +
  theme_umd()

p + annotation_custom(logo_grob,  xmin = 6, xmax = 7, ymin = 40, ymax = 44) +
  theme(plot.margin = margin(10, 50, 10, 10))  # Ajusta los márgenes si es necesario

# Crear una función que devuelva el gráfico con el tema y el logo
theme_custom_with_logo <- function() {
  theme_minimal(base_family = "Arial") + 
    theme(
      plot.title = element_text(family = "CustomFont", face = "bold", color = "#CC0000", size = 20),
      plot.subtitle = element_text(face = "plain", color = "#000000", size = 16),
      plot.caption = element_text(face = "plain", color = "#808080", size = 12),
      axis.title = element_text(face = "plain", color = "#808080", size = 12),
      axis.ticks = element_line(color = "#000000"),
      axis.ticks.length = unit(0.2, "cm"),
      panel.grid.major = element_line(color = "#D3D3D3", linetype = "dashed"),
      panel.grid.minor = element_line(color = "#D3D3D3", linetype = "dashed"),
      plot.margin = margin(t = 50, r = 100, b = 20, l = 20) # Ajustar márgenes para dejar espacio al logo
    )
}
# Crear un gráfico de ejemplo usando la función personalizada
p <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  labs(
    title = "Title in Custom Font",
    subtitle = "Subtitle in Default Font",
    caption = "Caption in Default Font"
  ) +
  theme_custom_with_logo()

# Dibujar el gráfico
p

# Colocar el logo en la parte superior derecha, alineado con el título
grid.draw(
  grobTree(
    logo_grob,
    vp = viewport(x = 0.68, y = 0.86, 
                  width = 0.1, height = 0.1,
                  just = c("left", "top"))
  )
)
