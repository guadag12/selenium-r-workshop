library(RSelenium)
library(rvest)
library(dplyr)
library(stringr)
library(readr)
library(openxlsx)
library(netstat)
library('httr')
library(RSelenium)
library(tidyverse)
library(netstat)
library(rvest)

# URLs de las páginas
# paginas <- c(
#   "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html",
#   "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08907.html"#,
#   # Agrega el resto de las URLs aquí
# )



# Asume que Selenium está corriendo en el puerto 4567
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")

# Intenta abrir el navegador
remDr$open()

remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")

Sys.sleep(5) # Espera que cargue la página

log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
Sys.sleep(5)

email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')

email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
password_field$sendKeysToElement(list("Workshop123"))

login_button <- remDr$findElement(using = "id", 'login-button-id')
login_button$clickElement()


columns <- c("Author", "Title", "Min Estimate", "Max Estimate", "Sold Price", 
             "Auction Title", "Auction Date", "Sale Total", "Sale Number", 
             "Lots Count", "Web", "Web Number", "Code", "Year")
df_empty_total <- data.frame(matrix(ncol = length(columns), nrow = 0))
colnames(df_empty_total) <- columns


web <- "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html"
remDr$navigate(web)

sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')

# Refresh the page
remDr$refresh()

artworks_info <- list()

page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")

auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)

artworks_info<- data.frame(
  Author = author,
  Title = title,
  Min_Estimate = min_estimate,
  Max_Estimate = max_estimate,
  Sold_Price = sold_price,
  Auction_Title = auction_title,
  Auction_Date = auction_date,
  Sale_Total = sale_total,
  Sale_Number = sale_number,
  Lots_Count = lots_count,
  Web = web,
  stringsAsFactors = FALSE
)


# Close the browser window
remDr$close()

# Stop the RSelenium server
rD$server$stop()


# Función para iniciar sesión
iniciar_sesion <- function() {
  remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
  Sys.sleep(5) # Espera que cargue la página
  
  log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
  log_in_button$clickElement()
  Sys.sleep(5)
  
  email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
  password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
  
  email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
  password_field$sendKeysToElement(list("Workshop123"))
  
  Sys.sleep(5)
  
  login_button <- remDr$findElement(using = "id", 'login-button-id')
  login_button$clickElement()
}

# Inicializar el navegador y loguearse
iniciar_sesion()

# Columnas del dataframe
columns <- c("Author", "Title", "Min Estimate", "Max Estimate", "Sold Price", 
             "Auction Title", "Auction Date", "Sale Total", "Sale Number", 
             "Lots Count", "Web", "Web Number", "Code", "Year")
df_empty_total <- data.frame(matrix(ncol = length(columns), nrow = 0),  stringsAsFactors = FALSE)
df_empty_total[] <- lapply(df_empty_total, as.character)

colnames(df_empty_total) <- columns
class(df_empty_total$Author)


# Loop para procesar cada página
for (web in paginas) {
  print(paste("Procesando:", web))

  remDr$navigate(web)
  Sys.sleep(5)
  
  # Intentar obtener el número de la última página
  tryCatch({
    last_page_number <- remDr$findElement(using = "xpath", '//a[@class="with-border "][last()]')$getElementText() %>% as.integer()
  }, error = function(e) {
    print(paste("Error to obtain number of pages:", e$message))
    last_page_number <- 1
  })
  
  for (i in 1:last_page_number) {
    print(paste("Page:", i, "from", last_page_number))
    
    # Navegar a la página correspondiente
    remDr$navigate(paste0(web, "?p=", i))
    Sys.sleep(2)
    
    # Intentar verificar el mensaje "Log in to view sale total"
    tryCatch({
      sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
      if (!is.null(sale_total_message)) {
        print("Message 'Log in to view sale total' found, refresh the webpage...")
        remDr$refresh()
        Sys.sleep(5)
      }
    }, error = function(e) {
      print("Couldn't be found the message 'Log in to view sale total'")
    })
    
    # Extraer la información de las obras de arte
    artworks_info <- list()
    
    # Obtener los elementos de arte en la página
    tryCatch({
      page_source <- remDr$getPageSource()[[1]]
      page_html <- read_html(page_source)
      artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
      
      author <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
      title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
      estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
      estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
      min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
      max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
      sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
      
      auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
      auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
      sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
      sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
      lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
      
      artworks_info <- data.frame(
        Author = author,
        Title = title,
        Min_Estimate = min_estimate,
        Max_Estimate = max_estimate,
        Sold_Price = sold_price,
        stringsAsFactors = FALSE
      )
      artworks_info$Auction_Title = auction_title
      artworks_info$Auction_Date = auction_date
      artworks_info$Sale_Total = sale_total
      artworks_info$Sale_Number = sale_number
      artworks_info$Lots_Count = lots_count
      artworks_info$Web = web
      artworks_info$Web_Number = i
    
    }, error = function(e) {
      print(paste("Error scraping data:", e$message))
    })
    
    df_empty_total <- bind_rows(df_empty_total, artworks_info)
    
    print(paste("Data extract from the page", i, " from", web))
  }
}

# Guardar el dataframe en Excel
write.xlsx(df_empty_total, "C:/Users/Usuario/Documents/GitHub/mora-descarga/df_empty_total.xlsx")
remDr$close()
rD$server$stop()