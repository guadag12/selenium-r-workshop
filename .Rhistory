print(paste("Error al obtener el número de páginas:", e$message))
last_page_number <- 1
})
for (i in 1:last_page_number) {
print(paste("Página:", i, "de", last_page_number))
# Navegar a la página correspondiente
remDr$navigate(paste0(web, "?p=", i))
Sys.sleep(2)
# Intentar verificar el mensaje "Log in to view sale total"
tryCatch({
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
if (!is.null(sale_total_message)) {
print("Mensaje 'Log in to view sale total' encontrado, refrescando la página...")
remDr$refresh()
Sys.sleep(5)
}
}, error = function(e) {
print("No se encontró el mensaje 'Log in to view sale total'")
})
# Extraer la información de las obras de arte
artworks_info <- list()
# Obtener los elementos de arte en la página
tryCatch({
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
artworks_info <- data.frame(
Author = author,
Title = title,
Min_Estimate = min_estimate,
Max_Estimate = max_estimate,
Sold_Price = sold_price,
stringsAsFactors = FALSE
)
artworks_info$Auction_Title = auction_title
artworks_info$Auction_Date = auction_date
artworks_info$Sale_Total = sale_total
artworks_info$Sale_Number = sale_number
artworks_info$Lots_Count = lots_count
artworks_info$Web = web
artworks_info$Web_Number = i
}, error = function(e) {
print(paste("Error extrayendo datos:", e$message))
})
df_empty_total <- bind_rows(df_empty_total, artworks_info)
print(paste("Datos extraídos de la página", i, "de", web))
}
}
View(df_empty_total)
# Close the browser window
remDr$close()
# Stop the RSelenium server
rD$server$stop()
# Asume que Selenium está corriendo en el puerto 4567
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Intenta abrir el navegador
remDr$open()
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
Sys.sleep(5) # Espera que cargue la página
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
Sys.sleep(5)
email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
password_field$sendKeysToElement(list("Workshop123"))
login_button <- remDr$findElement(using = "id", 'login-button-id')
login_button$clickElement()
columns <- c("Author", "Title", "Min Estimate", "Max Estimate", "Sold Price",
"Auction Title", "Auction Date", "Sale Total", "Sale Number",
"Lots Count", "Web", "Web Number", "Code", "Year")
df_empty_total <- data.frame(matrix(ncol = length(columns), nrow = 0))
colnames(df_empty_total) <- columns
web <- "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html"
remDr$navigate(web)
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
artworks_info <- list()
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
artworks_info<- data.frame(
Author = author,
Title = title,
Min_Estimate = min_estimate,
Max_Estimate = max_estimate,
Sold_Price = sold_price,
Auction_Title = auction_title,
Auction_Date = auction_date,
Sale_Total = sale_total,
Sale_Number = sale_number,
Lots_Count = lots_count,
Web = web,
stringsAsFactors = FALSE
)
View(artworks_info)
View(artworks_info)
web <- "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html"
remDr$navigate(web)
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
# Close the browser window
remDr$close()
# Stop the RSelenium server
rD$server$stop()
# Asume que Selenium está corriendo en el puerto 4567
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Intenta abrir el navegador
remDr$open()
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
Sys.sleep(5) # Espera que cargue la página
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
Sys.sleep(5)
email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
password_field$sendKeysToElement(list("Workshop123"))
login_button <- remDr$findElement(using = "id", 'login-button-id')
login_button$clickElement()
columns <- c("Author", "Title", "Min Estimate", "Max Estimate", "Sold Price",
"Auction Title", "Auction Date", "Sale Total", "Sale Number",
"Lots Count", "Web", "Web Number", "Code", "Year")
df_empty_total <- data.frame(matrix(ncol = length(columns), nrow = 0))
colnames(df_empty_total) <- columns
web <- "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html"
remDr$navigate(web)
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
# Refresh the page
remDr$refresh()
artworks_info <- list()
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
artworks_info<- data.frame(
Author = author,
Title = title,
Min_Estimate = min_estimate,
Max_Estimate = max_estimate,
Sold_Price = sold_price,
Auction_Title = auction_title,
Auction_Date = auction_date,
Sale_Total = sale_total,
Sale_Number = sale_number,
Lots_Count = lots_count,
Web = web,
stringsAsFactors = FALSE
)
remDr$refresh()
artworks_info <- list()
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
artworks_info<- data.frame(
Author = author,
Title = title,
Min_Estimate = min_estimate,
Max_Estimate = max_estimate,
Sold_Price = sold_price,
Auction_Title = auction_title,
Auction_Date = auction_date,
Sale_Total = sale_total,
Sale_Number = sale_number,
Lots_Count = lots_count,
Web = web,
stringsAsFactors = FALSE
)
remDr$close()
# Stop the RSelenium server
rD$server$stop()
# Asume que Selenium está corriendo en el puerto 4567
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Intenta abrir el navegador
remDr$open()
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
Sys.sleep(5) # Espera que cargue la página
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
Sys.sleep(5)
email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
password_field$sendKeysToElement(list("Workshop123"))
login_button <- remDr$findElement(using = "id", 'login-button-id')
login_button$clickElement()
columns <- c("Author", "Title", "Min Estimate", "Max Estimate", "Sold Price",
"Auction Title", "Auction Date", "Sale Total", "Sale Number",
"Lots Count", "Web", "Web Number", "Code", "Year")
df_empty_total <- data.frame(matrix(ncol = length(columns), nrow = 0))
colnames(df_empty_total) <- columns
web <- "https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html"
remDr$navigate(web)
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
# Refresh the page
remDr$refresh()
sale_total_message <- remDr$findElement(using = "xpath", '//div[contains(text(), "Log in to view sale total")]')
remDr$refresh()
remDr$refresh()
artworks_info <- list()
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
sold_price <- artworks %>% html_node(xpath = './/div[@class="sold"]') %>% html_text(trim = TRUE) %>% str_replace("Lot Sold: ", "")
auction_title <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-title"]') %>% html_text(trim = TRUE)
auction_date <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info"]') %>% html_text(trim = TRUE)
sale_total <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-totalPrice"]') %>% html_text(trim = TRUE)
sale_number <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-auction-info-saleNumber"]') %>% html_text(trim = TRUE)
lots_count <- page_html %>% html_node(xpath = '//div[@class="AuctionsModule-lotsCount"]') %>% html_text(trim = TRUE)
artworks_info<- data.frame(
Author = author,
Title = title,
Min_Estimate = min_estimate,
Max_Estimate = max_estimate,
Sold_Price = sold_price,
Auction_Title = auction_title,
Auction_Date = auction_date,
Sale_Total = sale_total,
Sale_Number = sale_number,
Lots_Count = lots_count,
Web = web,
stringsAsFactors = FALSE
)
# Close the browser window
remDr$close()
View(artworks_info)
wdman::selenium()
wdman::selenium(retcommand = TRUE, check = FALSE)
wdman::selenium(retcommand = TRUE, check = FALSE)
remDr$open()
page_source <- remDr$getPageSource()[[1]]
# Selenium is running in the port that we said:
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Open the Chrome:
remDr$open()
# Tell the webpage that we want to scrape
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
page_source <- remDr$getPageSource()[[1]]
page_html <- read_html(page_source)
page_html
page_source
page_html
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
author_text
artworks
author_text <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
author_text
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
title
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimate_text
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
min_estimate, max_estimate
max_estimate
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
min_estimate
max_estimate
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimate_text
estimates <- str_replace_all(estimate_text, "Estimate: |USD", "") %>% str_split(" – ") %>% .[[1]]
min_estimate <- ifelse(length(estimates) >= 1, estimates[1], NA)
max_estimate <- ifelse(length(estimates) == 2, estimates[2], NA)
min_estimate
max_estimate
estimates
result <- tibble(estimates) %>%
mutate(values = str_remove_all(estimates, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("min", "max"), sep = " – ") %>%     # Split into min and max
mutate(across(c(min, max), as.numeric))
# Extracting the min and max vectors
min_values <- result$min
message("The minimum values are: ", min_values)
max_values <- result$max
message("The maximum values are: ", min_values)
min_values
result
result <- tibble(estimates) %>%
mutate(values = str_remove_all(estimates, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
result
tibble(estimate_text)
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
result
estimate_text
result
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
result
# Extracting the before and after vectors
min_values <- result$before
message("The minimum value per piece:", min_values)
max_values <- result$after
message("The minimum value per piece:", max_values)
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
result
# Extracting the before and after vectors
min_values <- result$before
print("The minimum value per piece:", min_values)
print(min_values)
print(max_values)
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
# Extracting the minimum and maximum vectors
min_values <- result$before
max_values <- result$after
print(min_values)
print(max_values)
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"),  # Remove unnecessary text
values = str_remove_all(values, ",")) %>%               # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))                   # Convert to numeric
# Extracting the minimum and maximum vectors
min_values <- result$before
max_values <- result$after
print(min_values)
print(max_values)
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"), # Remove unnecessary text
values = str_remove_all(values, ",")) %>%           # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))          # Convert to numeric
# Extracting the minimum and maximum vectors
min_values <- result$before
max_values <- result$after
print(min_values)
print(max_values)
artworks_info
wdman::selenium(retcommand = TRUE, check = FALSE)
# Check and install RSelenium if not already installed
if (!requireNamespace("RSelenium", quietly = TRUE)) {
install.packages("RSelenium")
}
if (!requireNamespace("wdman", quietly = TRUE)) {
install.packages("wdman")
}
wdman::selenium()
wdman::selenium(retcommand = TRUE, check = FALSE)
library(RSelenium)
# Assuming Selenium is running on the specified port (the port should be the same that you have in 5.b.)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Attempt to open the browser
remDr$open()
library(RSelenium)
library(tidyverse)
library(netstat)
library(httr)
library(wdman)
library(rvest)
# Selenium is running in the port that we said:
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Open the Chrome:
remDr$open()
# Tell the webpage that we want to scrape
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
page_source <- remDr$getPageSource()[[1]] #raw HTML source code
page_html <- read_html(page_source) #parses the raw HTML into a format that allows for HTML element selection and manipulation
page_html
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
artworks
author <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
author
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
title
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimate_text
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"), # Remove unnecessary text
values = str_remove_all(values, ",")) %>%           # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))          # Convert to numeric
# Extracting the minimum and maximum vectors
min_estimate <- result$before
max_estimate <- result$after
print(min_estimate)
print(min_estimate)
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
email_field$sendKeysToElement(list("r.workshop.umd@gmail.com"))
password_field$sendKeysToElement(list("Workshop123"))
login_button <- remDr$findElement(using = "id", 'login-button-id')
login_button$clickElement()
wdman::selenium(retcommand = TRUE, check = FALSE)
# Check and install RSelenium if not already installed
if (!requireNamespace("RSelenium", quietly = TRUE)) {
install.packages("RSelenium")
}
if (!requireNamespace("wdman", quietly = TRUE)) {
install.packages("wdman")
}
wdman::selenium()
wdman::selenium(retcommand = TRUE, check = FALSE)
library(RSelenium)
# Assuming Selenium is running on the specified port (the port should be the same that you have in 5.b.)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Attempt to open the browser
remDr$open()
remDr$close()
library(RSelenium)
library(tidyverse)
library(netstat)
library(httr)
library(wdman)
library(rvest)
# Selenium is running in the port that we said:
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4567L, browserName = "chrome")
# Open the Chrome:
remDr$open()
# Tell the webpage that we want to scrape
remDr$navigate("https://www.sothebys.com/en/auctions/2012/latin-american-art-n08862.html")
page_source <- remDr$getPageSource()[[1]] #raw HTML source code
page_html <- read_html(page_source) #parses the raw HTML into a format that allows for HTML element selection and manipulation
page_html
artworks <- page_html %>% html_nodes(xpath = '//li[@class="AuctionsModule-results-item"]')
artworks
author <- artworks %>% html_node(xpath = './/div[@class="title "]/a') %>% html_text(trim = TRUE)
author
title <- artworks %>% html_node(xpath = './/div[@class="description"]') %>% html_text(trim = TRUE)
title
estimate_text <- artworks %>% html_node(xpath = './/div[@class="estimate"]') %>% html_text(trim = TRUE)
estimate_text
result <- tibble(estimate_text) %>%
mutate(values = str_remove_all(estimate_text, "Estimate: | USD"), # Remove unnecessary text
values = str_remove_all(values, ",")) %>%           # Remove commas
separate(values, into = c("before", "after"), sep = " – ") %>% # Split into before and after
mutate(across(c(before, after), as.numeric))          # Convert to numeric
# Extracting the minimum and maximum vectors
min_estimate <- result$before
max_estimate <- result$after
print(min_estimate)
print(min_estimate)
log_in_button <- remDr$findElement(using = "xpath", '//a[@data-text-content="Log In"]')
log_in_button$clickElement()
email_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Email address"]')
password_field <- remDr$findElement(using = "xpath", '//input[@placeholder="Password"]')
